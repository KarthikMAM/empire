Parameters:
  DockerImage:
    Type: String
Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId:
        Ref: InternetGateway
      VpcId:
        Ref: Vpc
  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId:
        Ref: Vpc
  DefaultRouteRoute: 
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties: 
        RouteTableId:
          Ref: RouteTable
        DestinationCidrBlock: 0.0.0.0/0
        GatewayId:
          Ref: InternetGateway
  Subnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId:
        Ref: Vpc
      CidrBlock:
        Fn::Select: [0, { "Fn::Cidr": [{ "Fn::GetAtt": [Vpc, CidrBlock] }, 1, 8] }]
  SubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
        RouteTableId:
          Ref: RouteTable
        SubnetId:
          Ref: Subnet

  Cluster:
    Type: AWS::ECS::Cluster

  DockerExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
  DockerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /fargate/test
      RetentionInDays: 3
  DockerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId:
        Ref: Vpc
      GroupDescription: "Security group for Docker service"
      SecurityGroupIngress:
        - FromPort: 80
          ToPort: 80
          IpProtocol: tcp
          CidrIp: 0.0.0.0/0
  DockerTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ExecutionRoleArn:
        Fn::GetAtt: [DockerExecutionRole, Arn]
      RequiresCompatibilities:
        - FARGATE
      Cpu: "256"
      Memory: "512"
      NetworkMode: awsvpc
      ContainerDefinitions:
        - Name: docker
          Image:
            Ref: DockerImage
          Essential: true
          Environment:
            - Name: "DOCKER"
              Value: "yes"
            - Name: "PORT"
              Value: "80"
          PortMappings:
            - HostPort: 80
              ContainerPort: 80
          LogConfiguration:
            LogDriver: awslogs
            Options:
              "awslogs-group":
                Ref: DockerLogGroup
              "awslogs-region":
                Ref: AWS::Region
              "awslogs-stream-prefix": "docker"
  DockerService:
    Type: AWS::ECS::Service
    Properties:
      Cluster:
        Ref: Cluster
      TaskDefinition:
        Ref: DockerTaskDefinition
      DesiredCount: 0
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Ref: DockerSecurityGroup
          Subnets:
            - Ref: Subnet
